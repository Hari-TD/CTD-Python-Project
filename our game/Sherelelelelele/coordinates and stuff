import tkinter as tk
from tkinter import simpledialog, messagebox

window = tk.Tk()
window.title("Maze Navigator")

# Function to handle exiting the game
def exit_game():
    if messagebox.askokcancel("Quit", "Do you really want to quit?"):
        window.destroy()

menu_bar = tk.Menu(window) #create a menu bar

#create a file menu and add items
file_menu = tk.Menu(menu_bar, tearoff=0)  # 'tearoff=0' removes the dashed line
file_menu.add_command(label='Quit', command=exit_game)

#file menu added to menu bar
menu_bar.add_cascade(label="File", menu=file_menu)

window.config(menu=menu_bar) #configure menu bar in window window

#to change in main code:
player_position = [11, 6]

walls = [(0, 13), (0, 14), (1, 10), (1, 11), (1, 12),(1,13),(1,14),(2,10),(2,11),(2,12),(2,13),(2,14),(2,16),(2,17),(3,12),(3,13),(3,14),(3,16),(3,17),(3,18),(4,12),(4,13),(4,14),(4,16),(4,17),(4,18),(5,6),(5,7),(5,8),(5,9),(6,12),(6,13),(6,14),(6,16),(6,17),(6,18),(7,9),(7,11),(7,12),(7,13),(7,14),(7,16),(7,17),(7,18),(8,7),(8,9),(9,3),(10,1),(10,4),(10,8),(10,12),(10,13),(10,14),(11,11),(11,14),(12,6),(13,0),(13,3),(13,7),(14,1),(14,4),(15,2),(15,5),(15,9),(16,3),(16,9),(16,10),(17,7),(18,8),(18,10),(18,11),(18,12),(19,5),(19,6),(19,10),(19,11)]

Locations = {
    "Tang Zheng Tang Chinese Pavilion":  (10, 1),
    "Gym":  (17, 7) ,
    "T-lab":  (4, 16) ,
    "OneStop Centre":  (7, 18) ,
    "Albert Hong Lecture Theatre":  (2, 19) ,
    "Scrapyard":  (7, 9) ,
    "Swimming pool":  (18, 6) ,
    "Fab-Lab":  (6, 7) ,
    "Upper Changi MRT":  (0, 14) ,
    "D'Star Bistro":  (5, 18) ,
    "Campus Centre":  (7, 17) ,
    "Vending machines":  (6, 12), 
}

#START
def display_welcome_message(name):
    # Create the pop-up window
    popup = tk.Toplevel(window)
    popup.geometry("400x200")
    
    # Label to display the message
    label = tk.Label(popup, text="", wraplength=350, justify="left", padx=10, pady=10)
    label.pack(expand=True, fill="both")

    # List of messages to display
    messages = [
        (
            "Welcome to the Game!",
            f"Hello {name}, welcome to our game of navigating through SUTD.\n\n"
            "This game was made possible by Srihari, Zhi Ying, Marcel, Kris, and Sherelle.\n\n"
            "You will be navigating through the world-class SUTD campus, located in the heart of Singapore's innovation district."
        ),
        (
            "Controls",
            "You can navigate using W to go up, S to go down, A to go left, and D to go right.\n\n"
            "To quit the game, you can press ESC at any time."
        ),
        (
            "Gameplay",
            "We will give you a description of a specific location, and you will have to make your way there.\n\n"
            "If you reach the wrong spot, a clue will be given to guide you."
        ),
        (
            "Start the Adventure",
            f"Enjoy your adventure ahead, {name}!"
        )
    ]
    # Initialize the pop-up window with the first message
    index =0
    title, message = messages[index]
    popup.title(title)
    label.config(text=message)

    # Function to close the popup when spacebar is pressed
    def on_spacebar(event):
        popup.destroy()  # Close the pop-up immediately when spacebar is pressed
    def on_enter(event):
        nonlocal index  # To access the index variable from the outer scope
        index += 1
        if index < len(messages):  # Check if we still have messages to show
            title, message = messages[index]
            popup.title(title)
            label.config(text=message)
        else:
            popup.destroy()  # Close the pop-up when all messages have been shown
    
    # Start cycling through messages automatically after 2 seconds
    def show_message(index):
        if index < len(messages):
            title, message = messages[index]
            popup.title(title)
            label.config(text=message)
            # Schedule the next message update
            popup.after(100, lambda: show_message, index + 1)
    #click button to manually cycle through messages
    def on_button_click():
        nonlocal index
        if index < len(messages):
            title, message = messages[index]
            popup.title(title)
            label.config(text=message)
            index += 1
        else:
            popup.destroy()  # Close the pop-up when all messages have been shown

    # Create a button to manually cycle through messages
    button = tk.Button(popup, text="Next Message", command=on_button_click)
    button.pack(pady=10)

    # Bind spacebar to immediately close the pop-up
    popup.bind("<space>", on_spacebar) 
    popup.bind("<Return>", on_enter)
    
    #Close the popup when the window is closed using the close button
    popup.protocol("WM_DELETE_WINDOW", popup.destroy)
#END



window.mainloop()